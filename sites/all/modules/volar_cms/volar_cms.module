<?php

function _get_node_field($node, $field, $lang = 'en') {
  global $language;
  $var = FALSE;
  if(!empty($node->{$field}[$lang])) {
      $var = $node->{$field}[$lang];
  } elseif(!empty($node->{$field}[$language->language])) {
      $var = $node->{$field}[$language->language];
  } elseif(!empty($node->{$field}['und'])) {
      $var = $node->{$field}['und'];
  } elseif(!empty($node->{$field})) {
      $var = $node->{$field};
  }
  return $var;
}

/**
 * Implements hook_menu().
 */
function volar_cms_menu() {
  //$node = node_load(10);unset($node->nid, $node->vid, $node->created);node_save($node);
  $items = array();
  return $items;
}

/**
 * Implements hook_user_login().
 */
function volar_cms_user_login(&$edit, $account) {
  $edit['redirect'] = '<front>';
}

function volar_cms_menu_edit_item_validate($form, &$form_state) {
  $values = $form_state['values'];
  if(strpos($values['link_path'], '#') === 0) {
    $values['link_path'] = str_replace('#', 'http://_anchor_', $values['link_path']);
    form_set_value(array('#parents' => array('link_path')), $values['link_path'], $form_state);
  }
}

/**
 * Implements hook_form_alter().
 */
function volar_cms_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'menu_edit_item':
      if (isset( $form['link_path']['#default_value'])) {
        $form['link_path']['#default_value'] = str_replace('http://_anchor_', '#', $form['link_path']['#default_value']);
        array_unshift($form['#validate'], 'volar_cms_menu_edit_item_validate');        
      }
      break;
    case 'search_block_form':
      $form['search_block_form']['#attributes']['placeholder'] = t('Search...');
      $form['search_block_form']['#prefix'] = '<div class = "search-wrap">';
      $form['search_block_form']['#input_prefix'] = '<button class="search-button" type="submit" title="' . t('Start Search') . '"><i class="fa fa-search"></i></button>';
      $form['search_block_form']['#suffix'] = '</div>';
      $form['search_block_form']['#title'] = t('Search..');
      $form['actions']['#attributes']['class'][] = 'hidden';
      break;
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function volar_cms_theme_registry_alter(&$theme_registry) {
  $theme_registry['nikadevs_cms_block_settings']['path'] = drupal_get_path('theme', 'volar') . '/templates';
}

/**
 * Implements hook_preprocess_block().
 */
function volar_cms_preprocess_block(&$variables) {
  $settings = variable_get('nikadevs_cms_block_settings_' . variable_get('theme_default', 'none'), array());

  $variables['title_tag'] = 'h4';
  $variables['title_type'] = 'widget-default';
  $variables['title_padding_bottom'] = '';
  $variables['padding_bottom'] = '';
  $id = $variables['block']->module . '_' . $variables['block']->delta;
  if(isset($settings[$id])) {
    if(isset($settings[$id]['animation_delay']) && !empty($settings[$id]['animation_delay'])) {
      $variables['attributes_array']['data-wow-duration'] = $settings[$id]['animation'];
    }
    if(isset($settings[$id]['animation']) && !empty($settings[$id]['animation'])) {
      $variables['attributes_array']['class'] = 'wow ' . $settings[$id]['animation'];
      unset($variables['attributes_array']['data-animation'], $variables['attributes_array']['data-animation-delay']);
    }
    if(isset($settings[$id]['padding_bottom']) && $settings[$id]['padding_bottom']) {
      $variables['classes_array'][] = $settings[$id]['padding_bottom'];
    }
    $variables['title_tag'] = isset($settings[$id]['title_tag']) ? $settings[$id]['title_tag'] : $variables['title_tag'];
    $variables['title_type'] = isset($settings[$id]['title_type']) && $settings[$id]['title_type'] ? $settings[$id]['title_type'] : $variables['title_type'];
    $variables['padding_bottom'] = isset($settings[$id]['padding_bottom']) && $settings[$id]['padding_bottom'] ? $settings[$id]['padding_bottom'] : $variables['padding_bottom'];
    $variables['title_padding_bottom'] = isset($settings[$id]['title_padding_bottom']) && $settings[$id]['title_padding_bottom'] ? $settings[$id]['title_padding_bottom'] : $variables['title_padding_bottom'];
  }
}

/**
 * Implements hook_node_view().
 */
function volar_cms_node_view($node, $view_mode, $language) {
  if ($view_mode == 'full' && in_array($node->type, array('nd_portfolio', 'nd_blog'))) {
    $nids = db_select('node', 'n')->condition('n.type', $node->type)->fields('n', array('nid', 'title', 'created'))->orderBy('n.created', 'DESC')->execute()->fetchAll();
    $offset = 0;
    foreach($nids as $i => $entity) {
      $offset = $entity->nid == $node->nid ? $i : $offset; 
    }
    $node->next = !$offset ? $nids[count($nids) - 1] : $nids[$offset - 1];
    $node->prev = ($offset + 1) == count($nids) ? $nids[0] : $nids[$offset + 1];
  }
}


/**
 * Implements hook_field_formatter_info().
 */
function volar_cms_field_formatter_info() {
  return array(
    'volar_cms_services' => array(
      'label' => t('Volar: Services'),
      'field types' => array('taxonomy_term_reference'),
      'settings'  => array(
        'label' => TRUE,
        'columns' => 4
      ),
    ),
    'volar_cms_social_links' => array(
      'label' => t('Volar: Social Links'),
      'field types' => array('link_field'),
    ),
    'volar_cms_skills' => array(
      'label' => t('Volar: Skills'),
      'field types' => array('text'),
    ),
    'volar_cms_taxonomy_link' => array(
      'label' => t('Volar: Button Link'),
      'field types' => array('taxonomy_term_reference'),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function volar_cms_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  //This gets the view_mode where our settings are stored
  $display = $instance['display'][$view_mode];
  //This gets the actual settings
  $settings = $display['settings'];
  switch($display['type']) {
    case 'volar_cms_services':
      $element = array();
      $element['label'] = array(
        '#type' => 'checkbox',
        '#title' => t('Show default label'),
        '#default_value' => $settings['label'],
      );
      $element['columns'] = array(
        '#type' => 'select',
        '#title' => t('Columns'),
        '#options' => array(1 => 1, 2, 3, 4, 6),
        '#default_value' => $settings['columns'],
      );
      break;
  }
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function volar_cms_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  switch($display['type']) {
    case 'volar_cms_services':  
      $settings = $display['settings'];
      $summary = t('Default label: @label, columns: @columns', array(
        '@label' => $settings['label'] ? 'Yes' : 'No',
        '@columns' => $settings['columns']
      ));
      return $summary;
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function volar_cms_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  if(!count($items)) {
    return;
  }
  switch($display['type']) {
    case 'volar_cms_services':
      $element = array();
      $settings = $display['settings'];
      $output = '<div class="row">';
      $output .= $settings['label'] ? '<div class="work-category-title col-md-12"><h4>' . strtoupper(t($instance['label'])) . '</h4></div>' : ''; 
      $terms = array();
      foreach ($items as $delta => $item) {
        $terms[] = $item['tid'];
      }
      $terms = taxonomy_term_load_multiple($terms, array());
      foreach ($terms as $tid => $item) {
        $output .= '<div class="col-md-' . $settings['columns'] . ' col-sm-6"><div class="category-item">' . $item->name . '</div></div>';
      }
      $output .= '</div>';
      $element[0]['#markup'] = $output;
      return $element;
    case 'volar_cms_social_links':
      $element = array();
      $output = '<ul class="team-item-social clearlist">';
      foreach ($items as $delta => $item) {
        $output .= '<li><a href="' . $item['url'] . '" class="' . $item['title'] . '" target = "_blank"></a></li>';
      }
      $output .= '</ul>';
      $element[0]['#markup'] = $output;
      return $element;
    case 'volar_cms_skills':
      $element = array();
      $output = '';
      foreach ($items as $delta => $item) {
        if(!isset($item['value']) || !$item['value'] || strpos($item['value'], '|') === FALSE) {
          continue;
        }
        $title = '';
        $percent = '';
        list($title, $percent) = explode('|', $item['value']);
        $output .= '<div class="skillbar-container">
          <p class="skillbar-title font-second">' . $title . '
              <span>' . $percent . '%</span>
          </p>
          <div class="skillbar">
              <div class="skillbar-bar" data-percent="' . $percent . '%"></div>
          </div>
        </div>';
      }
      $output .= '';
      $element[0]['#markup'] = $output;
      return $element;
    case 'volar_cms_taxonomy_link':
      $element = array();
      $output = '<div class="tags">';
      $terms = array();
      foreach ($items as $delta => $item) {
        $terms[] = $item['tid'];
      }
      $terms = taxonomy_term_load_multiple($terms, array());
      foreach ($terms as $tid => $item) {
        $output .= l($item->name, 'taxonomy/term/' . $item->tid);
      }
      $output .= '</div>';
      $element[0]['#markup'] = $output;
      return $element;
  }
}